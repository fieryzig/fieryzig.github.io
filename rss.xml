<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title><![CDATA[Les Frites]]></title>
<description><![CDATA[Les Frites]]></description>
<link>https://fieryzig.github.io</link>
<lastBuildDate>Thu, 29 Jul 2021 07:44:08 +0000</lastBuildDate>
<item>
  <title><![CDATA[Unity移动端性能优化]]></title>
  <description><![CDATA[
<p>
最近读了<a href="https://blog.unity.com/technology/optimize-your-mobile-game-performance-tips-on-profiling-memory-and-code-architecture">Optimize your mobile game performance</a>，结合自己的实践，做一些笔记。
</p>

<div id="outline-container-org21c77ef" class="outline-2">
<h2 id="org21c77ef">真机Profiling</h2>
<div class="outline-text-2" id="text-org21c77ef">
<p>
Profiling所用到的主要工具是Unity自带的Profiler、Frame Debugger、Memory Debugger等。
由于真机环境和Editor环境是不同的，因此做性能分析，最好还是在真机上调试。
</p>

<ol class="org-ol">
<li>在 <code>Build Settings</code> 切换到对应的平台（Android）</li>
<li>开启 <code>Development Build</code> ， <code>Autoconnect Profiler</code></li>
<li><p>
打包apk，在真机上安装运行
</p>
<div class="org-src-container">
<pre class="src src-bash">adb install xxxxx.apk
</pre>
</div></li>
</ol>

<p>
<code>Autoconnect Profiler</code> 选项只适用于真机和主机在同一个网段下，通过Wifi连接。
如果网络环境不允许，可以通过USB进行调试，需要adb做一下端口转发。
</p>
<div class="org-src-container">
<pre class="src src-bash">adb forward tcp:34999 localabstract:Unity-com.yyyyy.xxxxx
</pre>
</div>
<p>
端口号34999，和具体的Unity版本相关，可以打开Unity的Profiler，点击Editor按钮，可以列出 <code>AndroidPlayer(ADB@127.0.0.1:?????)</code> ，填写这里显示的端口号。
</p>

<p>
至此，启动游戏，开启Record，就可以看到Record开始记录了，Happy Profiling！
</p>
</div>
</div>

<div id="outline-container-org69fcf29" class="outline-2">
<h2 id="org69fcf29">Before Profiling</h2>
<div class="outline-text-2" id="text-org69fcf29">
<p>
Profiling的目的当然是性能优化，那性能优化的目标是什么？又如何确定瓶颈呢？
</p>

<ul class="org-ul">
<li>性能优化的主要目标是 <b>FPS</b> （当然也有别的）
理论上，运行达到30 fps需要每帧耗时不超过33.33ms；60 fps需要每帧耗时不超过16.66ms。
然而在移动设备上，会有发热导致的降频情况，因此对于每帧的耗时要更小一些：30fps需要22ms/frame；60fps需要11ms/frame。</li>

<li>确定是CPU瓶颈还是GPU瓶颈
<ul class="org-ul">
<li>CPU-Bound：如果在Profiler中看到 <code>Gfx.WaitForCommands</code> ，说明渲染线程已经就绪，在等待主线程</li>
<li>GPU-Bound：如果在Profiler中看到 <code>Gfx.WaitForPresent</code> ，说明主线程已经就绪，等待GPU显示当前帧</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-org318847e" class="outline-2">
<h2 id="org318847e">UGUI</h2>
<div class="outline-text-2" id="text-org318847e">
<p>
UGUI经常引发性能问题。Canvas组件生成和更新Mesh，并发起Draw Call。这个过程会很消耗性能，在使用UGUI的时候，要注意以下几点。
</p>
</div>

<div id="outline-container-org8d86d0e" class="outline-3">
<h3 id="org8d86d0e">拆分Canvas</h3>
<div class="outline-text-3" id="text-org8d86d0e">
<p>
如果有一个很庞大的Canvas（比如里面有上千个元素），更新其中的一个元素，会使整个Canvas进行更新，可能会产生CPU突峰。
</p>

<p>
<b>Tips:</b>
</p>
<ul class="org-ul">
<li>UGUI支持多个Canvas。将UI元素按照更新的频率拆分。静态的元素放在一个Canvas中；更新频繁的元素，把同时更新的元素放在同一个更小的sub-canvas中</li>
<li>确保每个Canvas中的UI元素有相同的Z value、material和texture</li>
</ul>
</div>
</div>

<div id="outline-container-org35f5cd5" class="outline-3">
<h3 id="org35f5cd5">隐藏看不到的UI元素</h3>
<div class="outline-text-3" id="text-org35f5cd5">
<p>
将暂时看不到的UI元素disable掉，因为处于active的元素，可能会引起Draw Call。
</p>

<p>
<b>Tips:</b>
</p>
<ul class="org-ul">
<li>如果需要隐藏一个Canvas的可见性，不要disable GameObject，而要disable Canvas Component。这么做可以节省重建mesh和vertices的时间</li>
</ul>
</div>
</div>

<div id="outline-container-orge76a6e9" class="outline-3">
<h3 id="orge76a6e9">少用GraphicRaycaster和Raycast Target</h3>
<div class="outline-text-3" id="text-orge76a6e9">
<p>
屏幕点击等输入事件需要GraphicRaycaster组件。它会遍历屏幕上的每个输入点，检查是否是UI RectTransform。
<b>Tips:</b>
</p>
<ul class="org-ul">
<li>移除从顶层Canvas层级中默认的GraphicRaycaster，只在需要有交互的UI元素上添加GraphicRaycaster组件</li>
<li>在UI Text和Image中disable不需要的Raycast Target</li>
</ul>
</div>
</div>

<div id="outline-container-org651e360" class="outline-3">
<h3 id="org651e360">避免使用Layout Groups</h3>
<div class="outline-text-3" id="text-org651e360">
<p>
Layout Groups的Update效率很低，尽量少用。如果内部的UI元素不是动态的，那么不要使用。动态内容如果确实需要使用，不要将Layout Groups(Horizontal, Vertical, Grid)嵌套使用。
</p>
</div>
</div>

<div id="outline-container-org99c0963" class="outline-3">
<h3 id="org99c0963">避免使用庞大的List View和Grid View</h3>
<div class="outline-text-3" id="text-org99c0963">
<p>
<b>Tips:</b>
</p>
<ul class="org-ul">
<li>如果需要做包含大量元素的List View或Grid View，使用对象池做UI元素的复用</li>
</ul>
</div>
</div>

<div id="outline-container-orga463602" class="outline-3">
<h3 id="orga463602">Canvas渲染模式</h3>
<div class="outline-text-3" id="text-orga463602">
<p>
<b>Tips:</b>
</p>
<ul class="org-ul">
<li>如果使用 <code>World Space</code> 渲染模式，要填写Event Camera</li>
<li>尽量使用 <code>Screen Space - Overlay</code> 模式，不需要Camera</li>
</ul>
</div>
</div>

<div id="outline-container-org24fc835" class="outline-3">
<h3 id="org24fc835">降低OverDraw</h3>
<div class="outline-text-3" id="text-org24fc835">
<p>
之后单独写一篇文章   
</p>
</div>
</div>
</div>

<div id="outline-container-orgaf06477" class="outline-2">
<h2 id="orgaf06477">Further</h2>
<div class="outline-text-2" id="text-orgaf06477">
<ul class="org-ul">
<li>内存的GC优化</li>
<li>一些编程上的细节优化</li>
<li>GPU优化</li>
<li>降低OverDraw的优化</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://fieryzig.github.io/tags.html">Tags</a>: <a href="https://fieryzig.github.io/tag-unity.html">Unity</a> </div>]]></description>
  <category><![CDATA[Unity]]></category>
  <link>https://fieryzig.github.io/2021-07-29-unity移动端性能优化.html</link>
  <pubDate>Thu, 29 Jul 2021 10:05:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[About Me]]></title>
  <description><![CDATA[
<p>
名也者，相轧也。知也者，争之器也。二者凶器，非所以尽行也。
</p>

<div id="outline-container-org93cf627" class="outline-2">
<h2 id="org93cf627">关于我</h2>
<div class="outline-text-2" id="text-org93cf627">
<p>
目前的兴趣：游戏开发、计算机图形学、Emacs
</p>

<p>
欢迎讨论和学习
</p>

<p>
Email: duo0702@live.cn
</p>
</div>
</div>

<div id="outline-container-org3aae002" class="outline-2">
<h2 id="org3aae002">技术之外</h2>
<div class="outline-text-2" id="text-org3aae002">
<ul class="org-ul">
<li>喜欢厨艺</li>
<li>喜欢《诗经》、《庄子》</li>
<li>SNH48：7年老粉丝，现在佛系看看</li>
<li>二次元：算是个2.5次元吧</li>
</ul>
</div>
</div>

<div id="outline-container-orgcfb55ab" class="outline-2">
<h2 id="orgcfb55ab">Waifu</h2>
<div class="outline-text-2" id="text-orgcfb55ab">

<figure>
<img src="./images/about/waifu1.jpg" alt="waifu1.jpg" width="200px">

</figure>

<figure>
<img src="./images/about/waifu2.jpg" alt="waifu2.jpg" width="200px">

</figure>

<figure>
<img src="./images/about/waifu3.jpg" alt="waifu3.jpg" width="200px">

</figure>
</div>
</div>

<div id="outline-container-org1e1c117" class="outline-2">
<h2 id="org1e1c117">有关学习与工作的流水帐</h2>
<div class="outline-text-2" id="text-org1e1c117">
</div>
<div id="outline-container-orgf2da8b2" class="outline-3">
<h3 id="orgf2da8b2">2021</h3>
<div class="outline-text-3" id="text-orgf2da8b2">
<ul class="org-ul">
<li>预计6月硕士毕业</li>
<li>预计7月入职鹅厂</li>
</ul>
</div>
</div>

<div id="outline-container-org32e79f3" class="outline-3">
<h3 id="org32e79f3">2020</h3>
<div class="outline-text-3" id="text-org32e79f3">
</div>
<div id="outline-container-org59f337e" class="outline-4">
<h4 id="org59f337e">迷语</h4>
<div class="outline-text-4" id="text-org59f337e">
<p>
迷语是一款陌生人社交App。
</p>

<p>
我主要负责了推荐系统和NLP相关业务的工作。
</p>
</div>
</div>

<div id="outline-container-orgcf0248e" class="outline-4">
<h4 id="orgcf0248e">推荐系统外包</h4>
<div class="outline-text-4" id="text-orgcf0248e">
<p>
参与“快点阅读”和“中青看点”两家公司的推荐系统的搭建。
</p>
</div>
</div>
</div>

<div id="outline-container-org2cf85a9" class="outline-3">
<h3 id="org2cf85a9">2019</h3>
<div class="outline-text-3" id="text-org2cf85a9">
</div>
<div id="outline-container-org44c0114" class="outline-4">
<h4 id="org44c0114">Oneflow</h4>
<div class="outline-text-4" id="text-org44c0114">
<p>
Oneflow是国产分布式深度学习框架，我有幸实习了3-4个月，参与了Python API的开发工作。
</p>
</div>
</div>

<div id="outline-container-org7e5147c" class="outline-4">
<h4 id="org7e5147c">论文发表</h4>
<div class="outline-text-4" id="text-org7e5147c">
<p>
Joint Prediction for Kinematic Trajectories in Vehicle-Pedestrian-Mixed Scenes (ICCV 2019)
</p>
</div>
</div>
</div>

<div id="outline-container-org3f0fd6d" class="outline-3">
<h3 id="org3f0fd6d">2018</h3>
<div class="outline-text-3" id="text-org3f0fd6d">
</div>
<div id="outline-container-orga7018e9" class="outline-4">
<h4 id="orga7018e9">Everitoken</h4>
<div class="outline-text-4" id="text-orga7018e9">
<p>
在Everitoken区块链项目远程实习了5个月，负责开发Python SDK和负载测试。
</p>

<p>
<a href="https://github.com/everitoken/evt/commits?author=fieryzig">https://github.com/everitoken/evt/commits?author=fieryzig</a>
</p>
</div>
</div>

<div id="outline-container-orgb8bd183" class="outline-4">
<h4 id="orgb8bd183">论文发表</h4>
<div class="outline-text-4" id="text-orgb8bd183">
<p>
Replay attack detection based on distortion by loudspeaker for voice authentication (Multimedia Tools and Application 2018)
</p>
</div>
</div>
</div>

<div id="outline-container-orgc15ad1c" class="outline-3">
<h3 id="orgc15ad1c">2017及之前</h3>
<div class="outline-text-3" id="text-orgc15ad1c">
<ul class="org-ul">
<li>2017 从武汉大学计算机学院毕业，取得学士学位。</li>
<li>2016 年全国大学生信息安全大赛 二等奖</li>
<li>2015 年国际大学生程序设计竞赛（ACM-ICPC）长春赛区 金奖</li>
<li>2015 年国际大学生程序设计竞赛（ACM-ICPC）上海邀请赛 金奖</li>
<li>2015 年国际大学生程序设计竞赛（ACM-ICPC）北京赛区 银奖</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-orgd8c0f6b" class="outline-2">
<h2 id="orgd8c0f6b">测试一下评论功能</h2>
<div class="outline-text-2" id="text-orgd8c0f6b">
<div id="vcomments"></div>
<script>
    new Valine({
        el: '#vcomments',
        appId: 'C3hc4byJxsu4x5i5bATFh8Bk-gzGzoHsz',
        appKey: 'W04d30CR7ANFjuPmGUVcUc9j'
    })
</script>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://fieryzig.github.io/about.html</link>
  <pubDate>Wed, 10 Mar 2021 20:41:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[如何用手机发博客]]></title>
  <description><![CDATA[
<p>
承接上一篇从手机发出来的博客，讲一下是如何实现的。不过，这篇是在电脑写的。
</p>

<p>
(●'◡'●)
</p>

<div id="outline-container-org3b21384" class="outline-2">
<h2 id="org3b21384">缘起</h2>
<div class="outline-text-2" id="text-org3b21384">
<p>
最初用静态博客的时候，觉得每次写好了markdown，还要生成一下HTML十分的麻烦。后来Github官推了Jekyll，并且有了Actions的功能，算是解决了这个通点吧。
</p>

<p>
我这里的原理也是基于Github Actions去做的，下面具体的看一下是如何实现的吧。
</p>
</div>
</div>

<div id="outline-container-orga0cb6b9" class="outline-2">
<h2 id="orga0cb6b9">实现</h2>
<div class="outline-text-2" id="text-orga0cb6b9">
<p>
总共有三步
</p>
</div>

<div id="outline-container-org5e9fed3" class="outline-3">
<h3 id="org5e9fed3">把冰箱门打开</h3>
<div class="outline-text-3" id="text-org5e9fed3">
<p>
这一步是把当前的仓库 <code>checkout</code> 下来。
</p>

<div class="org-src-container">
<pre class="src src-yaml">- uses: actions/checkout@v2
  with:
    persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
    fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd8a894d" class="outline-3">
<h3 id="orgd8a894d">把大象装进去</h3>
<div class="outline-text-3" id="text-orgd8a894d">
<p>
这一步先是安装 <code>Emacs 27.1</code> ，然后执行 <code>render.bat</code> 。
</p>

<div class="org-src-container">
<pre class="src src-yaml">- uses: jcs090218/setup-emacs-windows@master
  with:
    version: 27.1

- name: Render HTML
  run: ./scripts/render.bat
</pre>
</div>

<p>
<code>render.bat</code> 主要是调用 <code>Emacs</code> 去执行 <code>render.el</code> 脚本。
</p>

<p>
<code>render.bat</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">emacs -q -nw --batch --load <span style="font-style: italic;">"./scripts/render.el"</span>
</pre>
</div>

<p>
<code>render.el</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(set-language-environment <span style="font-style: italic;">"UTF-8"</span>)
(<span style="font-weight: bold;">setq</span> make-backup-files nil)
(<span style="font-weight: bold;">require</span> '<span style="font-weight: bold; text-decoration: underline;">package</span>)
(add-to-list 'package-archives '(<span style="font-style: italic;">"melpa"</span> . <span style="font-style: italic;">"http://melpa.org/packages/"</span>))
(package-initialize)
(package-refresh-contents)

(package-install 'org-static-blog)
(package-install 'htmlize)

(<span style="font-weight: bold;">setq</span> fiery-blog-title <span style="font-style: italic;">"Les Frites"</span>)
(<span style="font-weight: bold;">setq</span> fiery-blog-url <span style="font-style: italic;">"https://fieryzig.github.io"</span>)

(<span style="font-weight: bold;">setq</span> org-static-blog-publish-title fiery-blog-title)
(<span style="font-weight: bold;">setq</span> org-static-blog-publish-url fiery-blog-url)
(<span style="font-weight: bold;">setq</span> org-static-blog-publish-directory <span style="font-style: italic;">"./"</span>)
(<span style="font-weight: bold;">setq</span> org-static-blog-posts-directory <span style="font-style: italic;">"posts/"</span>)
(<span style="font-weight: bold;">setq</span> org-static-blog-drafts-directory <span style="font-style: italic;">"drafts/"</span>)
(<span style="font-weight: bold;">setq</span> org-static-blog-enable-tags t)
(<span style="font-weight: bold;">setq</span> org-static-blog-use-preview t)
(<span style="font-weight: bold;">setq</span> org-static-blog-preview-ellipsis
      <span style="font-style: italic;">"&lt;p&gt;......&lt;/p&gt;"</span>)
(<span style="font-weight: bold;">setq</span> org-static-blog-preview-link-p t)
(<span style="font-weight: bold;">setq</span> org-export-with-toc nil)
(<span style="font-weight: bold;">setq</span> org-export-with-section-numbers nil)
(<span style="font-weight: bold;">setq</span> org-static-blog-page-header
      <span style="font-style: italic;">"&lt;meta name=\"author\" content=\"fieryzig\"&gt;</span>
<span style="font-style: italic;">&lt;meta name=\"referrer\" content=\"no-referrer\"&gt;</span>
<span style="font-style: italic;">&lt;link href=\"static/style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;</span>
<span style="font-style: italic;">"</span>)
(<span style="font-weight: bold;">setq</span> org-static-blog-page-preamble (concat
                                     <span style="font-style: italic;">"&lt;div class=\"header\"&gt;</span>
<span style="font-style: italic;">&lt;h1&gt;&lt;a href=\"https://fieryzig.github.io\" class=\"title\"&gt;"</span> fiery-blog-title <span style="font-style: italic;">"&lt;/a&gt;&lt;/h1&gt;</span>
<span style="font-style: italic;">&lt;p class=\"text-muted\"&gt;fieryzig's blog&lt;/p&gt;</span>
<span style="font-style: italic;">&lt;ul class=\"list-inline\"&gt;</span>
<span style="font-style: italic;">&lt;li class=\"list-inline-item\"&gt;&lt;a href=\"https://fieryzig.github.io/about.html\"&gt;About&lt;/a&gt;&lt;/li&gt;</span>
<span style="font-style: italic;">&lt;li class=\"list-inline-item\"&gt;&lt;a href=\"https://fieryzig.github.io/tags.html\"&gt;Tags&lt;/a&gt;&lt;/li&gt;</span>
<span style="font-style: italic;">&lt;/ul&gt;</span>
<span style="font-style: italic;">&lt;/div&gt;"</span>))
(<span style="font-weight: bold;">setq</span> org-static-blog-page-postamble <span style="font-style: italic;">""</span>)

(org-static-blog-publish)
</pre>
</div>

<p>
这里有三个地方需要留意一下：
</p>

<ul class="org-ul">
<li><code>(set-language-environment "UTF-8")</code> 设置默认的编码为 <code>UTF-8</code></li>
<li><code>(setq make-backup-files nil)</code> 关闭备份文件</li>
<li>记得最后调用 <code>(org-static-blog-publish)</code></li>
</ul>
</div>
</div>

<div id="outline-container-org7e23e98" class="outline-3">
<h3 id="org7e23e98">把冰箱门带上</h3>
<div class="outline-text-3" id="text-org7e23e98">
<p>
最后把项目再Commit Push上，就OK了。
</p>

<div class="org-src-container">
<pre class="src src-yaml">- name: Commit &amp; Push
  uses: actions-js/push@master
  with:
    github_token: ${{ secrets.GITHUB_TOKEN }}
</pre>
</div>


<p>
完整的代码详见：
</p>

<p>
<a href="https://github.com/fieryzig/fieryzig.github.io/blob/master/.github/workflows/main.yml">https://github.com/fieryzig/fieryzig.github.io/blob/master/.github/workflows/main.yml</a>
</p>
</div>
</div>
</div>

<div id="outline-container-org17b8767" class="outline-2">
<h2 id="org17b8767">参考</h2>
<div class="outline-text-2" id="text-org17b8767">
<ol class="org-ol">
<li><a href="https://gitlab.com/_zngguvnf/org-static-blog-example/-/blob/master/publish.el">https://gitlab.com/_zngguvnf/org-static-blog-example/-/blob/master/publish.el</a></li>
<li><a href="https://github.com/emacs-dashboard/emacs-dashboard/blob/master/.github/workflows/ci.yml">https://github.com/emacs-dashboard/emacs-dashboard/blob/master/.github/workflows/ci.yml</a></li>
<li><a href="https://docs.github.com/cn/actions">https://docs.github.com/cn/actions</a></li>
</ol>
</div>
</div>
<div class="taglist"><a href="https://fieryzig.github.io/tags.html">Tags</a>: <a href="https://fieryzig.github.io/tag-emacs.html">Emacs</a> </div>]]></description>
  <category><![CDATA[Emacs]]></category>
  <link>https://fieryzig.github.io/2021-03-09-如何用手机发博客.html</link>
  <pubDate>Tue, 09 Mar 2021 13:43:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[一篇来自手机的博客]]></title>
  <description><![CDATA[
<p>
测试一下手机发博客。如果成功的话，下一篇讲一下原理。
</p>
<div class="taglist"></div>]]></description>
  <link>https://fieryzig.github.io/一篇来自手机的博客.html</link>
  <pubDate>Mon, 08 Mar 2021 23:59:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[关于dashboard中recent files的问题]]></title>
  <description><![CDATA[
<p>
最近在使用dashboard的时候，发现了一个不完美的地方，就是经常发现Recent Files里面会出现Org Agenda相关的文件。这些文件占据了Recent Files的位置，导致无法显示出我真正想要的最近文件。
搜索了一下，发现<a href="https://github.com/emacs-dashboard/emacs-dashboard">dashboard</a>的issues里面已经有了相关的问题，并且！已经有<a href="https://github.com/emacs-dashboard/emacs-dashboard/pull/83">PR</a>修复了这个问题！
看来事情并不是这么简单。
</p>

<div id="outline-container-org34e5aec" class="outline-2">
<h2 id="org34e5aec">问题的复现</h2>
<div class="outline-text-2" id="text-org34e5aec">
<p>
因为自己只是在日常使用中经常遇到这个问题，并没有留意发生的条件，所以问题的第一步是复现这个问题。
</p>

<p>
首先发现重新启动Emacs显示的结果是正确的（Recent Files里面没有Org文件）
</p>

<p>
由于我的Emacs里面配置了 <code>tempbuf</code> ，所以10s钟后会自动kill掉org的buffer。
</p>

<p>
经过多次实验，我发现，10s前我在dashboard按 <code>g</code> ，刷新dashboard，显示正确。但是10s后（即org buffer被kill后），Recent Files里面就会出现Org文件。
</p>

<p>
一个问题此时变成了多个问题：
</p>

<ul class="org-ul">
<li>为什么org buffer被kill后，刷新dashboard会显示错误？</li>
<li>为什么启动Emacs又是正确的？</li>
<li>怎么解决这个问题？怎么让dashboard一直显示正确？</li>
</ul>
</div>
</div>

<div id="outline-container-org051d0b4" class="outline-2">
<h2 id="org051d0b4">继续探究</h2>
<div class="outline-text-2" id="text-org051d0b4">
</div>
<div id="outline-container-org7d62242" class="outline-3">
<h3 id="org7d62242">从dashboard出发</h3>
<div class="outline-text-3" id="text-org7d62242">
<p>
dashboard照理说已经修复了这个问题，我们先来看看PR83究竟是怎么修复的。
重点就在 <code>dashboard-insert-startupify-lists</code> 这个函数里
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">dashboard-insert-startupify-lists</span> ()
  <span style="font-style: italic;">"Insert the list of widgets into the buffer."</span>
  (<span style="font-weight: bold;">interactive</span>)
  (<span style="font-weight: bold;">let</span> ((buffer-exists (buffer-live-p (get-buffer dashboard-buffer-name)))
        (recentf-is-on (recentf-enabled-p))
        (origial-recentf-list recentf-list)
        (dashboard-num-recents (<span style="font-weight: bold;">or</span> (cdr (assoc 'recents dashboard-items)) 0))
        (max-line-length 0))
    <span style="font-weight: bold; font-style: italic;">;; </span><span style="font-weight: bold; font-style: italic;">disable recentf mode,</span>
    <span style="font-weight: bold; font-style: italic;">;; </span><span style="font-weight: bold; font-style: italic;">so we don't flood the recent files list with org mode files</span>
    <span style="font-weight: bold; font-style: italic;">;; </span><span style="font-weight: bold; font-style: italic;">do this by making a copy of the part of the list we'll use</span>
    <span style="font-weight: bold; font-style: italic;">;; </span><span style="font-weight: bold; font-style: italic;">let dashboard widgets change that</span>
    <span style="font-weight: bold; font-style: italic;">;; </span><span style="font-weight: bold; font-style: italic;">then restore the orginal list afterwards</span>
    <span style="font-weight: bold; font-style: italic;">;; </span><span style="font-weight: bold; font-style: italic;">(this avoids many saves/loads that would result from</span>
    <span style="font-weight: bold; font-style: italic;">;; </span><span style="font-weight: bold; font-style: italic;">disabling/enabling recentf-mode)</span>
    (<span style="font-weight: bold;">when</span> recentf-is-on
      (<span style="font-weight: bold;">setq</span> recentf-list (seq-take recentf-list dashboard-num-recents)))
    (<span style="font-weight: bold;">when</span> (<span style="font-weight: bold;">or</span> (not (eq dashboard-buffer-last-width (window-width)))
              (not buffer-exists))
      (<span style="font-weight: bold;">setq</span> dashboard-banner-length (window-width)
            dashboard-buffer-last-width dashboard-banner-length)
      (<span style="font-weight: bold;">with-current-buffer</span> (get-buffer-create dashboard-buffer-name)
        (<span style="font-weight: bold;">let</span> ((buffer-read-only nil))
          (erase-buffer)
          (dashboard-insert-banner)
          (dashboard-insert-page-break)
          (<span style="font-weight: bold;">setq</span> dashboard--section-starts nil)
          (mapc (<span style="font-weight: bold;">lambda</span> (els)
                  (<span style="font-weight: bold;">let*</span> ((el (<span style="font-weight: bold;">or</span> (car-safe els) els))
                         (list-size
                          (<span style="font-weight: bold;">or</span> (cdr-safe els)
                              dashboard-items-default-length))
                         (item-generator
                          (cdr-safe (assoc el dashboard-item-generators))))
                    (add-to-list 'dashboard--section-starts (point))
                    (funcall item-generator list-size)
                    (<span style="font-weight: bold;">when</span> recentf-is-on
                      (<span style="font-weight: bold;">setq</span> recentf-list origial-recentf-list))
                    (<span style="font-weight: bold;">setq</span> max-line-length
                          (max max-line-length (dashboard-maximum-section-length)))
                    (dashboard-insert-page-break)))
                dashboard-items)
          (<span style="font-weight: bold;">when</span> dashboard-center-content
            (<span style="font-weight: bold;">when</span> dashboard--section-starts
              (goto-char (car (last dashboard--section-starts))))
            (<span style="font-weight: bold;">let</span> ((margin (floor (/ (max (- (window-width) max-line-length) 0) 2))))
              (<span style="font-weight: bold;">while</span> (not (eobp))
                (<span style="font-weight: bold;">unless</span> (string-suffix-p (thing-at-point 'line) dashboard-page-separator)
                  (insert (make-string margin ?\ )))
                (forward-line 1))))
          (dashboard-insert-footer))
        (goto-char (point-min))
        (dashboard-mode)))
    (<span style="font-weight: bold;">when</span> recentf-is-on
      (<span style="font-weight: bold;">setq</span> recentf-list origial-recentf-list))))
</pre>
</div>

<p>
从中间的注释中可以看出，是先用 <code>origial-recentf-list</code> 将 <code>recentf-list</code> 记录下来，在最后再复原回去。
</p>

<p>
看起来好像没什么不对的。但是既然不对了，说明一定是 <code>recentf-list</code> 这个变量出了问题。并且 <code>kill-buffer</code> 之前没问题， <code>kill-buffer</code> 之后出了问题，是不是 <code>kill-buffer</code> 的时候改变了 <code>recentf-list</code> 呢
</p>
</div>
</div>

<div id="outline-container-org26c4651" class="outline-3">
<h3 id="org26c4651">到recentf中去</h3>
<div class="outline-text-3" id="text-org26c4651">
<p>
<a href="https://gitlab.com/basil-conto/emacs/blob/master/lisp/recentf.el#L1030">点这里</a>看recentf源码
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="font-weight: bold;">defconst</span> <span style="font-weight: bold; font-style: italic;">recentf-used-hooks</span>
  '(
    (find-file-hook       recentf-track-opened-file)
    (write-file-functions recentf-track-opened-file)
    (kill-buffer-hook     recentf-track-closed-file)
    (kill-emacs-hook      recentf-save-list)
    )
  <span style="font-style: italic;">"Hooks used by recentf."</span>)
</pre>
</div>

<p>
从这里可以看出它的逻辑是 <code>find-file</code> 和 <code>write-file</code> 的时候，将文件放入 <code>recentf-list</code> 中； <code>kill-buffer</code> 的时候将文件从 <code>recentf-list</code> 中删除；退出Emacs的时候将 <code>recentf-list</code> 写入文件。
</p>

<p>
看来这里也没什么问题。那问题究竟出在哪里？
</p>
</div>
</div>

<div id="outline-container-org8e5cca7" class="outline-3">
<h3 id="org8e5cca7">一个猜想</h3>
<div class="outline-text-3" id="text-org8e5cca7">
<p>
先不考虑第一次启动Emacs的话，问题变得简单了一些。存在org文件buffer的时候，刷新dashbaord没问题。不存在org文件buffer的时候，刷新dashboard就会出错。所以，一定是刷新dashbaord的时候，agenda会打开org文件，如果org文件已经在buffer中了，就不会 <code>find-file</code> ；否则调用 <code>find-file</code> 就会触发 <code>recentf-track-opened-file</code> ，将文件加入到 <code>recentf-list</code> 中。
</p>

<p>
但是每次在刷新dashboard之后（无论是否正确），我将 <code>recentf-list</code> 打印出来，结果都是不包含org文件的。这应该是dashboard刷新后，用之前的origial的复原了 <code>recentf-list</code> 。
</p>

<p>
也就是 <code>recentf-list</code> 刷新之前和刷新之后都是好的。而最终展现的Recent Files却是错的。
</p>

<p>
真相只有一个了，那就是生成Recent Files的时候，用的 <code>recentf-list</code> 是错的。
</p>
</div>
</div>

<div id="outline-container-orge2f3e69" class="outline-3">
<h3 id="orge2f3e69">深入dashboard-widgets</h3>
<div class="outline-text-3" id="text-orge2f3e69">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">dashboard-insert-recents</span> (list-size)
  <span style="font-style: italic;">"Add the list of LIST-SIZE items from recently edited files."</span>
  (<span style="font-weight: bold;">setq</span> dashboard--recentf-cache-item-format nil)
  (recentf-mode)
  (<span style="font-weight: bold;">let</span> ((inhibit-message t) (message-log-max nil))
    (recentf-cleanup))
  (dashboard-insert-section
   <span style="font-style: italic;">"Recent Files:"</span>
   (dashboard-shorten-paths recentf-list 'dashboard-recentf-alist)
   list-size
   (dashboard-get-shortcut 'recents)
   `(<span style="font-weight: bold;">lambda</span> (<span style="font-weight: bold; text-decoration: underline;">&amp;rest</span> ignore)
      (find-file-existing (dashboard-expand-path-alist ,el dashboard-recentf-alist)))
   (<span style="font-weight: bold;">let*</span> ((file (dashboard-expand-path-alist el dashboard-recentf-alist))
          (filename (dashboard-f-filename file))
          (path (dashboard-extract-key-path-alist el dashboard-recentf-alist)))
     (<span style="font-weight: bold;">cl-case</span> dashboard-recentf-show-base
       (align
        (<span style="font-weight: bold;">unless</span> dashboard--recentf-cache-item-format
          (<span style="font-weight: bold;">let*</span> ((len-align (dashboard--get-align-length dashboard-recentf-alist))
                 (new-fmt (dashboard--generate-align-format
                           dashboard-recentf-item-format len-align)))
            (<span style="font-weight: bold;">setq</span> dashboard--recentf-cache-item-format new-fmt)))
        (format dashboard--recentf-cache-item-format filename path))
       (nil (format dashboard-recentf-item-format filename path))
       (t path)))))
</pre>
</div>

<p>
在这里我们终于发现 <code>recentf-list</code> 。而这时的 <code>recentf-list</code> 应该是没有复原过的。所以才会输出错误的结果。
</p>

<p>
在这里，我们还注意到 <code>(recentf-mode)</code> 。也就是说 <code>recentf-mode</code> 是在这里启动的。这也是为什么重新启动Emacs显示正确的原因。因为dashboard先处理Agenda的org文件，此时还没有开启recentf-mode，所以结果是对的。
</p>

<p>
为了验证这一点，我将 <code>dashbaord-items</code> 里面的顺序调整了一下，把recentf放在agenda的前面。果然，再次启动Emacs，结果也是错误的。
</p>
</div>
</div>
</div>

<div id="outline-container-org8dc47f1" class="outline-2">
<h2 id="org8dc47f1">结论</h2>
<div class="outline-text-2" id="text-org8dc47f1">
<p>
所以，这个<a href="https://github.com/emacs-dashboard/emacs-dashboard/pull/83/">PR</a>压根没有修复Recent Files显示Agenda org files这个issue。它只在同时满足 <b>首次启动Emacs</b> 和 <b>agenda在recentf前面</b> 这两个条件时，它才会Work。
</p>

<p>
最后说一下我的解决方案：
</p>
</div>

<div id="outline-container-org454c3df" class="outline-3">
<h3 id="org454c3df">1.修改dashboard的逻辑</h3>
<div class="outline-text-3" id="text-org454c3df">
<p>
在上面dashboard的代码中加两行，作用是每次完成一个item之后，都复原一次 <code>recentf-list</code> 。
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="font-weight: bold;">lambda</span> (els)
        (<span style="font-weight: bold;">let*</span> ((el (<span style="font-weight: bold;">or</span> (car-safe els) els))
               (list-size
                (<span style="font-weight: bold;">or</span> (cdr-safe els)
                    dashboard-items-default-length))
               (item-generator
                (cdr-safe (assoc el dashboard-item-generators))))
          (add-to-list 'dashboard--section-starts (point))
          (funcall item-generator list-size)
          (<span style="font-weight: bold;">when</span> recentf-is-on
            (<span style="font-weight: bold;">setq</span> recentf-list origial-recentf-list))
          (<span style="font-weight: bold;">setq</span> max-line-length
                (max max-line-length (dashboard-maximum-section-length)))
          (dashboard-insert-page-break)))
      dashboard-items)
</pre>
</div>
<p>
这个方法，好处是简单容易，效率高，缺点是修改了dashboard，在代码没被合到master之前会比较难受。
</p>
</div>
</div>

<div id="outline-container-org14350ca" class="outline-3">
<h3 id="org14350ca">2.重新定义g按键</h3>
<div class="outline-text-3" id="text-org14350ca">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(define-key dashboard-mode-map (kbd <span style="font-style: italic;">"g"</span>) #'my-dashboard-g)
</pre>
</div>

<p>
<code>my-dashboard-g</code> 的实现有两种思路，一是在refresh之前，把recentf-mode关闭了。这个方法的缺点在上面的PR里面的注释里说道了，就是读写文件，效率差。二是直接refresh两次，因为第一次refresh的时候org文件的buffer是不在的，所以错了，第二次时org文件的buffer的文件还在，因此结果是正确的。
</p>

<p>
重新定义g按键的方法，并没有修复问题，只是看起来ok的trick，并且只能agenda在recentf的前面。
</p>

<p>
因此还是推荐第1种做法，改日有时间提个PR吧。
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://fieryzig.github.io/tags.html">Tags</a>: <a href="https://fieryzig.github.io/tag-emacs.html">Emacs</a> </div>]]></description>
  <category><![CDATA[Emacs]]></category>
  <link>https://fieryzig.github.io/2021-03-06-关于dashboard中recent-files的问题.html</link>
  <pubDate>Sat, 06 Mar 2021 18:35:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[来自Org的第一篇文章]]></title>
  <description><![CDATA[
<p>
这是一篇用Emacs和Org编写的博客。
</p>

<div id="outline-container-org36d7f29" class="outline-2">
<h2 id="org36d7f29">缘起</h2>
<div class="outline-text-2" id="text-org36d7f29">
<p>
最近突然想写博客了，其实之前也断断续续的写过一些，从一开始的CSDN到Github Pages，从pelican到hugo。
</p>

<p>
但是我感觉这些并不适合我。所以我有了一段用纸和笔手写博客的时光。随心所欲的写写画画，一切都是那么简单。
</p>

<p>
然后中间略过一些事情。
</p>

<p>
快进到我突然想写博客了。
</p>

<p>
因为我平时一直在用Emacs，所以我选择的范围缩小到了<a href="https://orgmode.org/worg/org-blog-wiki.html">这么大</a>。
</p>

<p>
试用过ox-hugo，感觉太麻烦了。
</p>

<p>
最终，忙里偷闲，在Emacs上配了<a href="https://github.com/bastibe/org-static-blog">org-static-blog</a>。
</p>
</div>
</div>

<div id="outline-container-org56a1234" class="outline-2">
<h2 id="org56a1234">org-static-blog</h2>
<div class="outline-text-2" id="text-org56a1234">
<p>
这个博客生成工具给我的感觉就是simple and brute force。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(use-package org-static-blog
  <span style="font-weight: bold;">:bind</span>
  (<span style="font-style: italic;">"C-c b n"</span> . org-static-blog-create-new-post)
  (<span style="font-style: italic;">"C-c b p"</span> . org-static-blog-publish)
  <span style="font-weight: bold;">:custom</span>
  (org-static-blog-publish-title fiery-blog-title)
  (org-static-blog-publish-url fiery-blog-url)
  (org-static-blog-publish-directory fiery-blog-directory)
  (org-static-blog-posts-directory (concat fiery-blog-directory <span style="font-style: italic;">"posts/"</span>))
  (org-static-blog-drafts-directory (concat fiery-blog-directory <span style="font-style: italic;">"drafts/"</span>))
  (org-static-blog-enable-tags t)
  (org-static-blog-use-preview t)
  (org-export-with-toc nil)
  (org-export-with-section-numbers nil)
  (org-static-blog-page-header
   <span style="font-style: italic;">"&lt;meta name=\"author\" content=\"fieryzig\"&gt;</span>
<span style="font-style: italic;">&lt;meta name=\"referrer\" content=\"no-referrer\"&gt;</span>
<span style="font-style: italic;">&lt;link href=\"static/style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;</span>
<span style="font-style: italic;">"</span>)
  (org-static-blog-page-preamble
   <span style="font-style: italic;">"&lt;div class=\"header\"&gt;</span>
<span style="font-style: italic;">&lt;h1 class=\"title\"&gt;&lt;a href=\"https://fieryzig.github.io\"&gt;fieryzig&lt;/a&gt;&lt;/h1&gt;</span>
<span style="font-style: italic;">&lt;p class=\"text-muted\"&gt;fieryzig's blog&lt;/p&gt;</span>
<span style="font-style: italic;">&lt;ul class=\"list-inline\"&gt;</span>
<span style="font-style: italic;">&lt;li class=\"list-inline-item\"&gt;&lt;a href=\"https://fieryzig.github.io\"&gt;About&lt;/a&gt;&lt;/li&gt;</span>
<span style="font-style: italic;">&lt;/ul&gt;</span>
<span style="font-style: italic;">&lt;/div&gt;"</span>)
  (org-static-blog-page-postamble <span style="font-style: italic;">""</span>))
</pre>
</div>

<p>
因为不太擅长前端（HTML/CSS/JS），所以现在还很简陋，之后会逐渐完善的。
</p>
</div>
</div>

<div id="outline-container-org1970f74" class="outline-2">
<h2 id="org1970f74">结语</h2>
<div class="outline-text-2" id="text-org1970f74">
<p>
最后立个flag，讲讲之后博客上会写些什么。
</p>

<ul class="org-ul">
<li>2020年是我比较复杂的一年，我想写写我关于2020年的回忆，以及2020年完成的和未完成的一些东西</li>
<li>自己之后学习的一些笔记
<ul class="org-ul">
<li>游戏开发</li>
<li>图形学/渲染</li>
<li>Emacs</li>
<li>厨艺？</li>
<li>其他好玩的东西</li>
</ul></li>
<li>日常生活的感悟和吐槽</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://fieryzig.github.io/tags.html">Tags</a>: <a href="https://fieryzig.github.io/tag-emacs.html">Emacs</a> <a href="https://fieryzig.github.io/tag-life.html">life</a> </div>]]></description>
  <category><![CDATA[Emacs]]></category>
  <category><![CDATA[life]]></category>
  <link>https://fieryzig.github.io/2021-03-04-来自org的第一篇文章.html</link>
  <pubDate>Thu, 04 Mar 2021 19:09:00 +0000</pubDate>
</item>
</channel>
</rss>
